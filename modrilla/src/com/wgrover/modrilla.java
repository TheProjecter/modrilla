/*
 * modrilla.java
 *
 * Created on July 13, 2007, 8:53 PM
 */

package com.wgrover;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;

/**
 *
 * @author  wgrover
 */
public class modrilla extends javax.swing.JFrame {
    
    /** Creates new form modrilla */
    public modrilla() {
        initComponents();
        previousButton.setEnabled(false);
        nextButton.setEnabled(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jFileChooser1 = new javax.swing.JFileChooser();
        aboutDialog = new javax.swing.JDialog();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        joggerDialog = new javax.swing.JDialog();
        minusYButton = new javax.swing.JButton();
        minusXButton = new javax.swing.JButton();
        plusXButton = new javax.swing.JButton();
        plusYButton = new javax.swing.JButton();
        speedCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        xLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        yLabel = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        setupPanel = new javax.swing.JPanel();
        alignmentModeLabel = new javax.swing.JLabel();
        alignmentModeCombo = new javax.swing.JComboBox();
        unitsLabel = new javax.swing.JLabel();
        unitsCombo = new javax.swing.JComboBox();
        outputLabel = new javax.swing.JLabel();
        outputCombo = new javax.swing.JComboBox();
        aboutButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        millSetupPanel = new javax.swing.JPanel();
        millUnitsLabel = new javax.swing.JLabel();
        millUnitsCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        leftSignCombo = new javax.swing.JComboBox();
        frontSignCombo = new javax.swing.JComboBox();
        backSignCombo = new javax.swing.JComboBox();
        rightSignCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        drillNickPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        zNickWhenDrilledUnitsLabel = new javax.swing.JLabel();
        zNickWhenDrilledField = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        yNickWhenDrilledField = new javax.swing.JTextField();
        yNickWhenDrilledUnitsLabel = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        xNickWhenDrilledField = new javax.swing.JTextField();
        xNickWhenDrilledUnitsLabel = new javax.swing.JLabel();
        jEditorPane3 = new javax.swing.JEditorPane();
        alignToNickPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        xNickInCrosshairField = new javax.swing.JTextField();
        xNickInCrosshairUnitsLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        yNickInCrosshairUnitsLabel = new javax.swing.JLabel();
        yNickInCrosshairField = new javax.swing.JTextField();
        jEditorPane4 = new javax.swing.JEditorPane();
        DXFmarksPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        xDXFa1Field = new javax.swing.JTextField();
        xDXFa1UnitsLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        yDXFa1Field = new javax.swing.JTextField();
        yDXFa1UnitsLabel = new javax.swing.JLabel();
        jEditorPane5 = new javax.swing.JEditorPane();
        millMarksPanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        xMODa1Label = new javax.swing.JLabel();
        xMODa1Field = new javax.swing.JTextField();
        xMODa1UnitsLabel = new javax.swing.JLabel();
        yMODa1Label = new javax.swing.JLabel();
        yMODa1Field = new javax.swing.JTextField();
        yMODa1UnitsLabel = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        xMODa2Label = new javax.swing.JLabel();
        xMODa2Field = new javax.swing.JTextField();
        xMODa2UnitsLabel = new javax.swing.JLabel();
        yMODa2Label = new javax.swing.JLabel();
        yMODa2Field = new javax.swing.JTextField();
        yMODa2UnitsLabel = new javax.swing.JLabel();
        jEditorPane6 = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        zSurfaceLabel = new javax.swing.JLabel();
        zSurfaceUnitsLabel = new javax.swing.JLabel();
        zSurfaceField = new javax.swing.JTextField();
        jEditorPane7 = new javax.swing.JEditorPane();
        jPanel11 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        waferThicknessField = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        overdrillField = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        peckDistanceField = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        zSpeedField = new javax.swing.JTextField();
        zSpeedUnitsLabel = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        repeatsField = new javax.swing.JTextField();
        serialDeviceLabel = new javax.swing.JLabel();
        serialDeviceField = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        zDrillSpeedField = new javax.swing.JTextField();
        zDrillSpeedUnitsLabel = new javax.swing.JLabel();
        fooLabel = new javax.swing.JLabel();
        zDrillSpeedUnitsCombo = new javax.swing.JComboBox();
        jEditorPane8 = new javax.swing.JEditorPane();
        jPanel13 = new javax.swing.JPanel();
        selectInputFileButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        inputFileTextArea = new javax.swing.JTextArea();
        jEditorPane9 = new javax.swing.JEditorPane();
        jPanel12 = new javax.swing.JPanel();
        inputPlot = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jEditorPane10 = new javax.swing.JEditorPane();
        nextButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();

        jTextArea7.setColumns(20);
        jTextArea7.setLineWrap(true);
        jTextArea7.setRows(5);
        jTextArea7.setText("Modrilla v2.0\n\nCopyright (c) 2007 Will Grover\n\nBased in part on 'dxf2fgc' copyright (c) 2007 Will Grover.  http://wgrover.com/dxf2fgc\n\nBased in part on 'cam.py' copyright (c) 2006 Neil Gershenfeld, Massachusetts Institute of Technology.  Permission granted for experimental and personal use; license for commercial sale available from MIT. http://cba.mit.edu/~neilg/fab/dist/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n");
        jTextArea7.setWrapStyleWord(true);
        jScrollPane8.setViewportView(jTextArea7);

        org.jdesktop.layout.GroupLayout aboutDialogLayout = new org.jdesktop.layout.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
        joggerDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        joggerDialog.setAlwaysOnTop(true);
        minusYButton.setText("\u2193");
        minusYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusYButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        joggerDialog.getContentPane().add(minusYButton, gridBagConstraints);

        minusXButton.setText("\u2190");
        minusXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusXButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        joggerDialog.getContentPane().add(minusXButton, gridBagConstraints);

        plusXButton.setText("\u2192");
        plusXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusXButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        joggerDialog.getContentPane().add(plusXButton, gridBagConstraints);

        plusYButton.setText("\u2191");
        plusYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusYButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        joggerDialog.getContentPane().add(plusYButton, gridBagConstraints);

        speedCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Slow", "Fast" }));
        speedCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedComboActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        joggerDialog.getContentPane().add(speedCombo, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Jog speed:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        joggerDialog.getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("X:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        joggerDialog.getContentPane().add(jLabel3, gridBagConstraints);

        xLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        xLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        joggerDialog.getContentPane().add(xLabel, gridBagConstraints);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Y:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        joggerDialog.getContentPane().add(jLabel6, gridBagConstraints);

        yLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 5);
        joggerDialog.getContentPane().add(yLabel, gridBagConstraints);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("units");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        joggerDialog.getContentPane().add(jLabel18, gridBagConstraints);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel19.setText("units");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        joggerDialog.getContentPane().add(jLabel19, gridBagConstraints);

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modrilla");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        alignmentModeLabel.setText("Alignment mode:");

        alignmentModeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Drill bit alignment", "Microscope alignment" }));
        alignmentModeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignmentModeComboActionPerformed(evt);
            }
        });

        unitsLabel.setText("Input file units:");

        unitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Millimeters", "Microns", "Centimeters", "Inches", "Mils", "Mill units" }));
        unitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitsComboActionPerformed(evt);
            }
        });

        outputLabel.setText("Output file format:");

        outputCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "G-code", "Roland Modela" }));
        outputCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputComboActionPerformed(evt);
            }
        });

        aboutButton.setText("About modrilla...");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Input file format:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DXF" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jEditorPane2.setContentType("text/html");
        jEditorPane2.setEditable(false);
        jEditorPane2.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane2.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");
        jScrollPane3.setViewportView(jEditorPane2);

        org.jdesktop.layout.GroupLayout setupPanelLayout = new org.jdesktop.layout.GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(
            setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(setupPanelLayout.createSequentialGroup()
                        .add(unitsLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(unitsCombo, 0, 251, Short.MAX_VALUE))
                    .add(setupPanelLayout.createSequentialGroup()
                        .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, setupPanelLayout.createSequentialGroup()
                                .add(outputLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(outputCombo, 0, 234, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, setupPanelLayout.createSequentialGroup()
                                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1)
                                    .add(alignmentModeLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(alignmentModeCombo, 0, 242, Short.MAX_VALUE)
                                    .add(jComboBox2, 0, 242, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, aboutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        setupPanelLayout.setVerticalGroup(
            setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(alignmentModeLabel)
                    .add(alignmentModeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(unitsLabel)
                    .add(unitsCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(outputLabel)
                    .add(outputCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(aboutButton)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Setup", setupPanel);

        millUnitsLabel.setText("Mill units:");

        millUnitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Millimeters", "Microns", "Inches", "Mils", "Modela units" }));
        millUnitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                millUnitsComboActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Mill axis orientation"));
        leftSignCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+", "-" }));
        leftSignCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftSignComboActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(leftSignCombo, gridBagConstraints);

        frontSignCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+", "-" }));
        frontSignCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frontSignComboActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        jPanel2.add(frontSignCombo, gridBagConstraints);

        backSignCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+", "-" }));
        backSignCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backSignComboActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        jPanel2.add(backSignCombo, gridBagConstraints);

        rightSignCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+", "-" }));
        rightSignCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightSignComboActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(rightSignCombo, gridBagConstraints);

        jLabel4.setText("Y axis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel7.setText("X axis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel2.add(jLabel7, gridBagConstraints);

        jTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6.setText("Mill worksurface");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jTextField6, gridBagConstraints);

        jLabel20.setText("jLabel20");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jPanel2.add(jLabel20, gridBagConstraints);

        jLabel21.setText("^");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(jLabel21, gridBagConstraints);

        jLabel22.setText("v");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel2.add(jLabel22, gridBagConstraints);

        jLabel23.setText(">");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jLabel23, gridBagConstraints);

        jLabel24.setText("<");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jLabel24, gridBagConstraints);

        org.jdesktop.layout.GroupLayout millSetupPanelLayout = new org.jdesktop.layout.GroupLayout(millSetupPanel);
        millSetupPanel.setLayout(millSetupPanelLayout);
        millSetupPanelLayout.setHorizontalGroup(
            millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, millSetupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, millSetupPanelLayout.createSequentialGroup()
                        .add(millUnitsLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(millUnitsCombo, 0, 280, Short.MAX_VALUE)))
                .addContainerGap())
        );
        millSetupPanelLayout.setVerticalGroup(
            millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, millSetupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 95, Short.MAX_VALUE)
                .add(millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(millUnitsLabel)
                    .add(millUnitsCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Mill setup", millSetupPanel);

        jLabel8.setText("Z:");

        zNickWhenDrilledUnitsLabel.setText("millimeters");

        zNickWhenDrilledField.setText("45");

        jLabel41.setText("Y:");

        yNickWhenDrilledField.setText("34");

        yNickWhenDrilledUnitsLabel.setText("millimeters");

        jLabel47.setText("X:");

        xNickWhenDrilledField.setText("23");

        xNickWhenDrilledUnitsLabel.setText("millimeters");

        jEditorPane3.setContentType("text/html");
        jEditorPane3.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane3.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout drillNickPanelLayout = new org.jdesktop.layout.GroupLayout(drillNickPanel);
        drillNickPanel.setLayout(drillNickPanelLayout);
        drillNickPanelLayout.setHorizontalGroup(
            drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, drillNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, drillNickPanelLayout.createSequentialGroup()
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zNickWhenDrilledField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zNickWhenDrilledUnitsLabel))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, drillNickPanelLayout.createSequentialGroup()
                        .add(jLabel41)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickWhenDrilledField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickWhenDrilledUnitsLabel))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, drillNickPanelLayout.createSequentialGroup()
                        .add(jLabel47)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickWhenDrilledField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickWhenDrilledUnitsLabel)))
                .addContainerGap())
        );
        drillNickPanelLayout.setVerticalGroup(
            drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, drillNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel47)
                    .add(xNickWhenDrilledUnitsLabel)
                    .add(xNickWhenDrilledField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel41)
                    .add(yNickWhenDrilledUnitsLabel)
                    .add(yNickWhenDrilledField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(zNickWhenDrilledUnitsLabel)
                    .add(zNickWhenDrilledField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Drill nick", drillNickPanel);

        jLabel10.setText("X:");

        xNickInCrosshairField.setText("87");

        xNickInCrosshairUnitsLabel.setText("millimeters");

        jLabel12.setText("Y:");

        yNickInCrosshairUnitsLabel.setText("millimeters");

        yNickInCrosshairField.setText("76");

        jEditorPane4.setContentType("text/html");
        jEditorPane4.setEditable(false);
        jEditorPane4.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane4.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout alignToNickPanelLayout = new org.jdesktop.layout.GroupLayout(alignToNickPanel);
        alignToNickPanel.setLayout(alignToNickPanelLayout);
        alignToNickPanelLayout.setHorizontalGroup(
            alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, alignToNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, alignToNickPanelLayout.createSequentialGroup()
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickInCrosshairField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickInCrosshairUnitsLabel))
                    .add(alignToNickPanelLayout.createSequentialGroup()
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickInCrosshairField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickInCrosshairUnitsLabel)))
                .addContainerGap())
        );
        alignToNickPanelLayout.setVerticalGroup(
            alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, alignToNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(xNickInCrosshairUnitsLabel)
                    .add(xNickInCrosshairField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(yNickInCrosshairUnitsLabel)
                    .add(yNickInCrosshairField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Align nick", alignToNickPanel);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("First alignment mark"));
        jLabel14.setText("X:");

        xDXFa1Field.setText("67");

        xDXFa1UnitsLabel.setText("millimeters");

        jLabel16.setText("Y:");

        yDXFa1Field.setText("99");

        yDXFa1UnitsLabel.setText("millimeters");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xDXFa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xDXFa1UnitsLabel))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jLabel16)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yDXFa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yDXFa1UnitsLabel)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(xDXFa1UnitsLabel)
                    .add(xDXFa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(yDXFa1UnitsLabel)
                    .add(yDXFa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jEditorPane5.setContentType("text/html");
        jEditorPane5.setEditable(false);
        jEditorPane5.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane5.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout DXFmarksPanelLayout = new org.jdesktop.layout.GroupLayout(DXFmarksPanel);
        DXFmarksPanel.setLayout(DXFmarksPanelLayout);
        DXFmarksPanelLayout.setHorizontalGroup(
            DXFmarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DXFmarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(DXFmarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        DXFmarksPanelLayout.setVerticalGroup(
            DXFmarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DXFmarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("DXF marks", DXFmarksPanel);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("First alignment mark"));
        xMODa1Label.setText("X:");

        xMODa1Field.setText("100");
        xMODa1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xMODa1FieldActionPerformed(evt);
            }
        });

        xMODa1UnitsLabel.setText("millimeters");

        yMODa1Label.setText("Y:");

        yMODa1Field.setText("200");

        yMODa1UnitsLabel.setText("millimeters");

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(xMODa1Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa1UnitsLabel))
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(yMODa1Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa1UnitsLabel)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(xMODa1Label)
                    .add(xMODa1UnitsLabel)
                    .add(xMODa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(yMODa1Label)
                    .add(yMODa1UnitsLabel)
                    .add(yMODa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Second alignment mark"));
        xMODa2Label.setText("X:");

        xMODa2Field.setText("500");

        xMODa2UnitsLabel.setText("millimeters");

        yMODa2Label.setText("Y:");

        yMODa2Field.setText("500");

        yMODa2UnitsLabel.setText("millimeters");

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(xMODa2Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa2Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa2UnitsLabel))
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(yMODa2Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa2Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa2UnitsLabel)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(xMODa2Label)
                    .add(xMODa2UnitsLabel)
                    .add(xMODa2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(yMODa2Label)
                    .add(yMODa2UnitsLabel)
                    .add(yMODa2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jEditorPane6.setContentType("text/html");
        jEditorPane6.setEditable(false);
        jEditorPane6.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane6.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout millMarksPanelLayout = new org.jdesktop.layout.GroupLayout(millMarksPanel);
        millMarksPanel.setLayout(millMarksPanelLayout);
        millMarksPanelLayout.setHorizontalGroup(
            millMarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, millMarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(millMarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        millMarksPanelLayout.setVerticalGroup(
            millMarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(millMarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Mill marks", millMarksPanel);

        zSurfaceLabel.setText("Z:");

        zSurfaceUnitsLabel.setText("millimeters");

        zSurfaceField.setText("100");

        jEditorPane7.setContentType("text/html");
        jEditorPane7.setEditable(false);
        jEditorPane7.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane7.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(zSurfaceLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSurfaceField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSurfaceUnitsLabel)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(zSurfaceLabel)
                    .add(zSurfaceUnitsLabel)
                    .add(zSurfaceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Drill nick", jPanel1);

        jLabel30.setText("Glass thickness:");

        waferThicknessField.setText("1100");

        jLabel31.setText("microns");

        jLabel32.setText("Overdrill:");

        overdrillField.setText("400");

        jLabel33.setText("microns");

        jLabel34.setText("Peck distance:");

        peckDistanceField.setText("100");

        jLabel35.setText("microns");

        jLabel36.setText("Non-drilling Z speed:");

        zSpeedField.setText("0.01");

        zSpeedUnitsLabel.setText("mm/min");

        jLabel38.setText("Repeats per peck:");

        repeatsField.setText("3");

        serialDeviceLabel.setText("Mill serial device:");
        serialDeviceLabel.setEnabled(false);

        serialDeviceField.setText("/dev/ttyS0");
        serialDeviceField.setEnabled(false);

        jLabel40.setText("Z drill speed:");

        zDrillSpeedField.setText("0.01");

        zDrillSpeedUnitsLabel.setText("mm/min");

        fooLabel.setText("Mill Z speed units:");

        zDrillSpeedUnitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "mm/min", "Modela units/sec" }));
        zDrillSpeedUnitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zDrillSpeedUnitsComboActionPerformed(evt);
            }
        });

        jEditorPane8.setContentType("text/html");
        jEditorPane8.setEditable(false);
        jEditorPane8.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane8.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(serialDeviceLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(serialDeviceField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel38)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(repeatsField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel36)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSpeedField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSpeedUnitsLabel))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel34)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(peckDistanceField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel35))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel32)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(overdrillField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel33))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel30)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(waferThicknessField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel31))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(fooLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zDrillSpeedUnitsCombo, 0, 239, Short.MAX_VALUE))
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(jLabel40)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zDrillSpeedField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zDrillSpeedUnitsLabel)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fooLabel)
                    .add(zDrillSpeedUnitsCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel40)
                    .add(zDrillSpeedUnitsLabel)
                    .add(zDrillSpeedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel30)
                    .add(jLabel31)
                    .add(waferThicknessField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel32)
                    .add(jLabel33)
                    .add(overdrillField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel34)
                    .add(jLabel35)
                    .add(peckDistanceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel36)
                    .add(zSpeedUnitsLabel)
                    .add(zSpeedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel38)
                    .add(repeatsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(serialDeviceLabel)
                    .add(serialDeviceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Options", jPanel11);

        selectInputFileButton.setText("Select DXF file...");
        selectInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectInputFileButtonActionPerformed(evt);
            }
        });

        inputFileTextArea.setColumns(20);
        inputFileTextArea.setLineWrap(true);
        inputFileTextArea.setRows(5);
        inputFileTextArea.setText("no file selected");
        jScrollPane7.setViewportView(inputFileTextArea);

        jEditorPane9.setContentType("text/html");
        jEditorPane9.setEditable(false);
        jEditorPane9.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane9.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout jPanel13Layout = new org.jdesktop.layout.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, selectInputFileButton))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectInputFileButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Input file", jPanel13);

        inputPlot.setBackground(new java.awt.Color(255, 255, 255));
        inputPlot.setOpaque(true);

        jButton1.setText("Plot input file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Plot output file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jEditorPane10.setContentType("text/html");
        jEditorPane10.setEditable(false);
        jEditorPane10.setFont(new java.awt.Font("Serif", 0, 12));
        jEditorPane10.setText("<html>\n\n<p><b>Do this.</b>  Here are some more details.\n\n</html>");

        org.jdesktop.layout.GroupLayout jPanel12Layout = new org.jdesktop.layout.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, inputPlot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jEditorPane10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel12Layout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 130, Short.MAX_VALUE)
                        .add(jButton3)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(jEditorPane10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(inputPlot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton3))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Plot", jPanel12);

        nextButton.setText("Next  step \u2192");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.setText("\u2190 Previous step");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jTabbedPane1)
                    .add(layout.createSequentialGroup()
                        .add(previousButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 145, Short.MAX_VALUE)
                        .add(nextButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(previousButton)
                    .add(nextButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void unitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitsComboActionPerformed
// TODO add your handling code here:
        xDXFa1UnitsLabel.setText(unitsCombo.getSelectedItem().toString().toLowerCase());
        yDXFa1UnitsLabel.setText(unitsCombo.getSelectedItem().toString().toLowerCase());
    }//GEN-LAST:event_unitsComboActionPerformed
    
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed
    
    private void frontSignComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frontSignComboActionPerformed
        if (frontSignCombo.getSelectedItem() == "+") {
            backSignCombo.setSelectedItem("-");
        }
        if (frontSignCombo.getSelectedItem() == "-") {
            backSignCombo.setSelectedItem("+");
        }
}//GEN-LAST:event_frontSignComboActionPerformed
    
private void backSignComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backSignComboActionPerformed
    if (backSignCombo.getSelectedItem() == "+") {
        frontSignCombo.setSelectedItem("-");
    }
    if (backSignCombo.getSelectedItem() == "-") {
        frontSignCombo.setSelectedItem("+");
    }
}//GEN-LAST:event_backSignComboActionPerformed

private void leftSignComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftSignComboActionPerformed
    if (leftSignCombo.getSelectedItem() == "+") {
        rightSignCombo.setSelectedItem("-");
    }
    if (leftSignCombo.getSelectedItem() == "-") {
        rightSignCombo.setSelectedItem("+");
    }
}//GEN-LAST:event_leftSignComboActionPerformed

private void rightSignComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightSignComboActionPerformed
    if (rightSignCombo.getSelectedItem() == "+") {
        leftSignCombo.setSelectedItem("-");
    }
    if (rightSignCombo.getSelectedItem() == "-") {
        leftSignCombo.setSelectedItem("+");
    }
}//GEN-LAST:event_rightSignComboActionPerformed

    private void minusYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusYButtonActionPerformed
// TODO add your handling code here:
        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,-5;' > " + serialDeviceField.getText()});
                y = y - 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,-100;' > " + serialDeviceField.getText()});
                y = y - 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_minusYButtonActionPerformed
    
    private void plusYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusYButtonActionPerformed
// TODO add your handling code here:
        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,5;' > " + serialDeviceField.getText()});
                y = y + 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,100;' > " + serialDeviceField.getText()});
                y = y + 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_plusYButtonActionPerformed
    
    private void minusXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusXButtonActionPerformed
// TODO add your handling code here:
        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD-5,0;' > " + serialDeviceField.getText()});
                x = x - 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD-100,0;' > " + serialDeviceField.getText()});
                x = x - 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_minusXButtonActionPerformed
    
    private void plusXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusXButtonActionPerformed
// TODO add your handling code here:
        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD5,0;' > " + serialDeviceField.getText()});
                x = x + 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD100,0;' > " + serialDeviceField.getText()});
                x = x + 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_plusXButtonActionPerformed
    
    private void speedComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedComboActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_speedComboActionPerformed
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
        
        
        
        
        
        
        
        
        // general startup code:
        
        
        
        
        
        
        
        
        jTabbedPane1.setEnabledAt(2, false);
        jTabbedPane1.setEnabledAt(3, false);
        joggerDialog.setSize(275, 225);
        joggerDialog.setTitle("Modela jogger");
        leftSignCombo.setSelectedItem("-");
        frontSignCombo.setSelectedItem("-");
        
        
        
        
        
        //try{
        //    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        //} catch(Exception e) {
        //    
        //}
    }//GEN-LAST:event_formWindowOpened
    
    private void alignmentModeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignmentModeComboActionPerformed
// TODO add your handling code here:
        if (alignmentModeCombo.getSelectedItem() == "Drill bit alignment") {
            jTabbedPane1.setEnabledAt(2, false);
            jTabbedPane1.setEnabledAt(3, false);
            jTabbedPane1.setEnabledAt(6, true);
        } else if (alignmentModeCombo.getSelectedItem() == "Microscope alignment") {
            jTabbedPane1.setEnabledAt(2, true);
            jTabbedPane1.setEnabledAt(3, true);
            jTabbedPane1.setEnabledAt(6, false);
        }
    }//GEN-LAST:event_alignmentModeComboActionPerformed
    
    private void millUnitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_millUnitsComboActionPerformed
// TODO add your handling code here:
        xNickWhenDrilledUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yNickWhenDrilledUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        zNickWhenDrilledUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        xNickInCrosshairUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yNickInCrosshairUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        xMODa1UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yMODa1UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        xMODa2UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yMODa2UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        zSurfaceUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        
    }//GEN-LAST:event_millUnitsComboActionPerformed
    
    private void outputComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputComboActionPerformed
// TODO add your handling code here:
        if (outputCombo.getSelectedItem() == "G-code") {
            serialDeviceLabel.setEnabled(false);
            serialDeviceField.setEnabled(false);
            millUnitsCombo.setSelectedItem("Millimeters");
            millUnitsCombo.setEnabled(true);
            millUnitsLabel.setEnabled(true);
            zDrillSpeedUnitsCombo.setSelectedItem("mm/min");
            fooLabel.setEnabled(true);
            joggerDialog.setVisible(false);
            
            frontSignCombo.setEnabled(true);
            backSignCombo.setEnabled(true);
            rightSignCombo.setEnabled(true);
            leftSignCombo.setEnabled(true);
            
            zSurfaceField.setEnabled(true);
            zSurfaceLabel.setEnabled(true);
            zSurfaceUnitsLabel.setEnabled(true);
            
        } else if (outputCombo.getSelectedItem() == "Roland Modela") {
            serialDeviceLabel.setEnabled(true);
            serialDeviceField.setEnabled(true);
            millUnitsCombo.setSelectedItem("Modela units");
            millUnitsCombo.setEnabled(false);
            millUnitsLabel.setEnabled(false);
            zDrillSpeedUnitsCombo.setSelectedItem("Modela units/sec");
            zDrillSpeedUnitsCombo.setEnabled(false);
            fooLabel.setEnabled(false);
            joggerDialog.setVisible(true);
            
            frontSignCombo.setEnabled(false);
            backSignCombo.setEnabled(false);
            rightSignCombo.setEnabled(false);
            leftSignCombo.setEnabled(false);
            frontSignCombo.setSelectedItem("-");
            backSignCombo.setSelectedItem("+");
            rightSignCombo.setSelectedItem("+");
            leftSignCombo.setSelectedItem("-");
            
            zSurfaceField.setEnabled(false);
            zSurfaceLabel.setEnabled(false);
            zSurfaceUnitsLabel.setEnabled(false);
        }
    }//GEN-LAST:event_outputComboActionPerformed
    
    private void zDrillSpeedUnitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zDrillSpeedUnitsComboActionPerformed
// TODO add your handling code here:
        zDrillSpeedUnitsLabel.setText(zDrillSpeedUnitsCombo.getSelectedItem().toString());
        zSpeedUnitsLabel.setText(zDrillSpeedUnitsCombo.getSelectedItem().toString());
    }//GEN-LAST:event_zDrillSpeedUnitsComboActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        BufferedImage image2 = new BufferedImage(inputPlot.getWidth(), inputPlot.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics graphics2 = image2.getGraphics();
        
        graphics2.setColor(Color.BLACK);
        
        for (int h = 0; h <= holes; h++) {
            
            int xPlot = (int) (xMODholes[h] - xMODmin-0.05*(xMODmin-xMODmax));
            int yPlot = (int) (yMODholes[h] - yMODmin-0.05*(yMODmin-yMODmax));
            
            xPlot = (int) (xPlot*inputPlot.getWidth() /(1.1*(xMODmax-xMODmin)));
            yPlot = (int) (yPlot*inputPlot.getHeight()/(1.1*(yMODmax-yMODmin)));
            
            //System.out.println("("+xDXFholes[h]+", "+yDXFholes[h]+")   ("+xPlot+", "+yPlot+")");
            graphics2.fillOval(xPlot, yPlot, 5, 5);
        }
        
        graphics2.dispose();
        inputPlot.setIcon(new ImageIcon(image2));
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void xMODa1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xMODa1FieldActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_xMODa1FieldActionPerformed
    
    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
// TODO add your handling code here:
        aboutDialog.setSize(300, 400);
        aboutDialog.setVisible(!aboutDialog.isVisible());
    }//GEN-LAST:event_aboutButtonActionPerformed
    
    private void selectInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectInputFileButtonActionPerformed
        // TODO add your handling code here:
        
        jFileChooser1.showOpenDialog(this);
        inputFileTextArea.setText(jFileChooser1.getSelectedFile().toString());
        infile=jFileChooser1.getSelectedFile();
        
        
        
        
        // BIG PASTE STARTS HERE
        
        
        
        
        
        
        
        
        
        // define scaleFactor initially in terms of Modela units
        double scaleFactor=1;
        if(unitsCombo.getSelectedItem()=="Mill units") {
            scaleFactor = 1;
        } else if(unitsCombo.getSelectedItem()=="Mils") {
            scaleFactor = 0.984;
        } else if(unitsCombo.getSelectedItem()=="Inches") {
            scaleFactor = 0.000984;
        } else if(unitsCombo.getSelectedItem()=="Millimeters") {
            scaleFactor = 0.025;
        } else if(unitsCombo.getSelectedItem()=="Microns") {
            scaleFactor = 25.0;
        } else if(unitsCombo.getSelectedItem()=="Centimeters") {
            scaleFactor = 0.0025;
        }
        
        // if necessary, now convert from Modela units to Mill units
        if(millUnitsCombo.getSelectedItem()=="Modela units") {
            ;  //do nothing; scaleFactor is already in Modela units
        } else if(millUnitsCombo.getSelectedItem()=="Mils") {
            scaleFactor=0.984/scaleFactor;
        } else if(millUnitsCombo.getSelectedItem()=="Inches") {
            scaleFactor=0.000984/scaleFactor;
        } else if(millUnitsCombo.getSelectedItem()=="Millimeters") {
            scaleFactor=0.025/scaleFactor;
        } else if(millUnitsCombo.getSelectedItem()=="Microns") {
            scaleFactor=25.0/scaleFactor;
        } else if(millUnitsCombo.getSelectedItem()=="Centimeters") {
            scaleFactor=0.0025/scaleFactor;
        }
        
        
        //DXF coords are divided by scaleFactor
        double xDXFa1=Double.parseDouble(xDXFa1Field.getText())/scaleFactor;
        double yDXFa1=Double.parseDouble(yDXFa1Field.getText())/scaleFactor;
        //Coords from Mill are not scaled
        double xMODa1=Double.parseDouble(xMODa1Field.getText());
        double yMODa1=Double.parseDouble(yMODa1Field.getText());
        double xMODa2=Double.parseDouble(xMODa2Field.getText());
        double yMODa2=Double.parseDouble(yMODa2Field.getText());
        
        //Scale these as microns
        //double waferThickness=Double.parseDouble(waferThicknessField.getText())/25.0;
        //double overdrill=Double.parseDouble(overdrillField.getText())/25.0;
        //double peckDistance=Double.parseDouble(peckDistanceField.getText())/25.0;
        double waferThickness=0.0;
        double overdrill=0.0;
        double peckDistance=0.0;
        if(millUnitsCombo.getSelectedItem()=="Modela units") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/25.0;
            overdrill=Double.parseDouble(overdrillField.getText())/25.0;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/25.0;
        } else if(millUnitsCombo.getSelectedItem()=="Mils") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/25.4;
            overdrill=Double.parseDouble(overdrillField.getText())/25.4;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/25.4;
        } else if(millUnitsCombo.getSelectedItem()=="Inches") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/25400;
            overdrill=Double.parseDouble(overdrillField.getText())/25400;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/25400;
        } else if(millUnitsCombo.getSelectedItem()=="Millimeters") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/1000.0;
            overdrill=Double.parseDouble(overdrillField.getText())/1000.0;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/1000.0;
        } else if(millUnitsCombo.getSelectedItem()=="Microns") {
            waferThickness=Double.parseDouble(waferThicknessField.getText());
            overdrill=Double.parseDouble(overdrillField.getText());
            peckDistance=Double.parseDouble(peckDistanceField.getText());
        } else if(millUnitsCombo.getSelectedItem()=="Centimeters") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/10000.0;
            overdrill=Double.parseDouble(overdrillField.getText())/10000.0;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/10000.0;
        }
        
        //speeds aren't scaled! assume mm/min for mill or mill units for modela
        double zSpeed=Double.parseDouble(zSpeedField.getText());
        double zDrillSpeed=Double.parseDouble(zDrillSpeedField.getText());
        
        int repeats=Integer.parseInt(repeatsField.getText());
        
        // these aren't read yet and must be scaled after reading from file
        double xDXF=0;
        double yDXF=0;
        double xMOD=0;
        double yMOD=0;
        
        
        try {
            FileReader fr = new FileReader(infile);
            BufferedReader in=new BufferedReader(fr);
            BufferedWriter out = new BufferedWriter(new FileWriter(infile.getParent()+File.separator+infile.getName()+".sh"));
            
            // START OF PREAMBLE
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                //make this a shell script
                out.write("#!/bin/sh\n");
            }
            
            //info lines
            
            Date d = new Date();
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                out.write("echo 'Running "+infile.getName()+".sh'\n");
                out.write("echo 'Generated "+d+" by Modrilla v2.0 by Will Grover'\n");
                out.write("echo 'http://wgrover.com/modrilla'\n");
            }
            
            if(outputCombo.getSelectedItem()=="G-code") {
                out.write("(Prepared from "+infile.getName()+")\n");
                out.write("(Generated "+d+" by Modrilla v2.0 by Will Grover)\n");
                out.write("(http://wgrover.com/modrilla)\n");
            }
            
            //stty command for Modela
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                out.write("stty 9600 raw -echo crtscts <"+serialDeviceField.getText()+"\n");
            }
            
            //head up and head down heights for Modela
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                //head down (z during PD) = 0 (at the top of the wafer)
                //head up (z during PU) = 500 (500 units above the top of the wafer)
                out.write("echo '!PZ0,500;!MC1;' > "+serialDeviceField.getText()+"\n");
            }
            
            //drilling feed rate for G-code
            
            if(outputCombo.getSelectedItem()=="G-code") {
                out.write("F"+zDrillSpeedField.getText()+"\n");
            }
            
            // END OF PREAMBLE
            
            String line;
            int circles=0;
            //scanmode 0: looking for "CIRCLE"
            //scanmode 1: looking for " 10" (DXFx)
            //scanmode 2: read x
            //scanmode 3: looking for " 20" (DXFy)
            //scanmode 4: read y and convert (DXFx,DXFy)
            int scanmode=0;
            while ((line=in.readLine())!=null) {
                
                if(scanmode==2) {
                    xDXF=Double.parseDouble(line)/scaleFactor;
                    scanmode=3;
                } else if(scanmode==4) {
                    yDXF=Double.parseDouble(line)/scaleFactor;
                    
                    //conversion math
                    
                    if(rightSignCombo.getSelectedItem()=="+") { xSign=1; } else { xSign=-1; }
                    
                    if(backSignCombo.getSelectedItem()=="+") { ySign=1; } else { ySign=-1; }
                    
                    xMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF, yDXF)[0];
                    yMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF, yDXF)[1];
                    
                    // disabled Sign for now:
                    //                    xMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF*xSign, yDXF*ySign)[0];
                    //                    yMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF*xSign, yDXF*ySign)[1];
                    
                    
                    //remember (xDXF,yDXF) and (xMOD,yMOD) for plotting later
                    xDXFholes[hole]=xDXF;
                    yDXFholes[hole]=-yDXF;
                    xMODholes[hole]=xMOD;
                    yMODholes[hole]=-yMOD;
                    holes=hole;
                    hole++;
                    
                    //if this is the first hole, then set MAX and MIN to these coordinates
                    if(holes==0) {
                        xDXFmax=xDXF;
                        xDXFmin=xDXF;
                        yDXFmax=-yDXF;
                        yDXFmin=-yDXF;
                        xMODmax=xMOD;
                        xMODmin=xMOD;
                        yMODmax=-yMOD;
                        yMODmin=-yMOD;
                    }
                    
                    //otherwise, check for new MAX and MIN coordinates
                    else {
                        //record new xDXFmax, xDXFmin, yDXFmax, and yDXFmin, if any
                        if(xDXF>xDXFmax) {xDXFmax=xDXF;}
                        if(xDXF<xDXFmin) {xDXFmin=xDXF;}
                        if(-yDXF>yDXFmax) {yDXFmax=-yDXF;}
                        if(-yDXF<yDXFmin) {yDXFmin=-yDXF;}
                        //added these minuses to fix plotting
                        
                        //record new xMODmax, xMODmin, yMODmax, and yMODmin, if any
                        if(xMOD>xMODmax) {xMODmax=xMOD;}
                        if(xMOD<xMODmin) {xMODmin=xMOD;}
                        if(-yMOD>yMODmax) {yMODmax=-yMOD;}
                        if(-yMOD<yMODmin) {yMODmin=-yMOD;}
                        //added these minuses to fix plotting
                    }
                    
                    
                    
                    
                    //report that we're drilling a hole at (xMOD,yMOD)
                    
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("\necho 'Drilling hole "+circles+" at ("+(int)xMOD+","+(int)yMOD+")'\n");
                    }
                    
                    if(outputCombo.getSelectedItem()=="G-code") {
                        ;       //can we put a (parenthetical comment) here?
                    }
                    
                    
                    
                    //consistent screw loading: move first to (xMOD-offset,yMOD-offset) absolute, head up
                    double offset=0;
                    if(millUnitsCombo.getSelectedItem()=="Modela units") {
                        offset = 100;
                    } else if(millUnitsCombo.getSelectedItem()=="Millimeters") {
                        offset = 3;
                    } else if(millUnitsCombo.getSelectedItem()=="Centimeters") {
                        offset = 0.3;
                    } else if(millUnitsCombo.getSelectedItem()=="Microns") {
                        offset = 300;
                    } else if(millUnitsCombo.getSelectedItem()=="Inches") {
                        offset = 0.2;
                    } else if(millUnitsCombo.getSelectedItem()=="Mils") {
                        offset = 100;
                    }
                    
                    double xMODapproach=xMOD-offset;
                    double yMODapproach=yMOD-offset;
                    
                    // move to approach
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("echo 'PA;PU"+(int)xMODapproach+","+(int)yMODapproach+";' > "+serialDeviceField.getText()+"\n");
                    }
                    if(outputCombo.getSelectedItem()=="G-code") {
                        out.write("G00 X"+xMODapproach+" Y"+yMODapproach+"\n");
                    }
                    
                    //now move to (xMOD,yMOD) absolute, head up
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("echo 'PA;PU"+(int)xMOD+","+(int)yMOD+";' > "+serialDeviceField.getText()+"\n");
                    }
                    if(outputCombo.getSelectedItem()=="G-code") {
                        out.write("G00 X"+xMOD+" Y"+yMOD+"\n");
                    }
                    
                    //drill by pecking, using RELATIVE coordinates in Z dimension
                    //lower quickly to wafer surface
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("echo 'PR;PD;' > "+serialDeviceField.getText()+"\n");
                    }
                    double depth=0;
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        depth=0;
                    }
                    double zSurface=0;
                    double zCurrent=0;
                    if(outputCombo.getSelectedItem()=="G-code") {
                        zSurface=Double.parseDouble(zSurfaceField.getText());
                        depth=0;
                        zCurrent=zSurface;
                    }
                    
                    while(depth<waferThickness+overdrill) {
                        
                        zCurrent=zCurrent-depth;   // FIXME this assumes minus equals more depth
                        
                        int repeat=0;
                        
                        while(repeat<repeats) {
                            
                            
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("echo 'PR;");
                            }
                            
                            //lower quickly to previous drilled depth
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("!VZ"+zSpeed+";");
                                out.write("!ZM-"+(int)depth+";");
                            }
                            if(outputCombo.getSelectedItem()=="G-code") {
                                out.write("G00 Z"+zCurrent+"\n");
                            }
                            
                            //lower slowly one additional peck
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("!VZ"+zDrillSpeed+";");
                                out.write("!ZM-"+(int)peckDistance+";");
                            }
                            if(outputCombo.getSelectedItem()=="G-code") {
                                double zCurrentMinusOnePeck=zCurrent-peckDistance;
                                out.write("G01 Z"+zCurrentMinusOnePeck+"\n");
                            }
                            
                            //raise quickly to wafer surface
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("!VZ"+zSpeed+";");
                                out.write("!ZM"+(int)peckDistance+";");
                                out.write("!ZM"+(int)depth+";' > "+serialDeviceField.getText()+"\n");
                            }
                            if(outputCombo.getSelectedItem()=="G-code") {
                                out.write("G00 Z"+zSurface+"\n");
                            }
                            
                            //record new peck repeat
                            repeat=repeat+1;
                        }
                        //record new depth - this affects both Modela and G-code modes
                        depth=depth+peckDistance;
                    }
                    
                    //raise head to PU position before going to next hole
                    //I don't think this is doing anything...
                    //out.write("PU;");
                    
                    //but we must raise the head to a safe drilling height for G-code:
                    if(outputCombo.getSelectedItem()=="G-code") {
                        double zSafe=zSurface+10;  // FIXME!!!!  CAN'T EVENTUALLY BE A CONSTANT!
                        out.write("G00 Z"+zSafe+"\n");
                    }
                    
                    //last thing, return to scanmode 0
                    scanmode=0;
                } else if(line.contains("CIRCLE")&&scanmode==0) {
                    scanmode=1; ++circles;
                } else if(line.contains(" 10")&&scanmode==1) {
                    scanmode=2;
                } else if(line.contains(" 20")&&scanmode==3) {
                    scanmode=4;
                }
            }
            //graceful shutdown
            out.write("echo 'PA;PU1000,1000;!MC0;' > "+serialDeviceField.getText()+"\n");
            
            //statusLabel.setText("Converted "+circles+" holes");
            
            out.close();
        } catch (IOException ioe) {}
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        // BIG PASTE ENDS HERE
        
        
    }//GEN-LAST:event_selectInputFileButtonActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        BufferedImage image = new BufferedImage(inputPlot.getWidth(), inputPlot.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics graphics = image.getGraphics();
        
        graphics.setColor(Color.BLACK);
        
        for (int h = 0; h <= holes; h++) {
            
            int xPlot = (int) (xDXFholes[h] - xDXFmin-0.05*(xDXFmin-xDXFmax));
            int yPlot = (int) (yDXFholes[h] - yDXFmin-0.05*(yDXFmin-yDXFmax));
            
            xPlot = (int) (xPlot*inputPlot.getWidth() /(1.1*(xDXFmax-xDXFmin)));
            yPlot = (int) (yPlot*inputPlot.getHeight()/(1.1*(yDXFmax-yDXFmin)));
            
            //System.out.println("("+xDXFholes[h]+", "+yDXFholes[h]+")   ("+xPlot+", "+yPlot+")");
            graphics.fillOval(xPlot, yPlot, 5, 5);
        }
        
        graphics.dispose();
        inputPlot.setIcon(new ImageIcon(image));
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
// TODO add your handling code here:
        if (jTabbedPane1.getSelectedIndex() == 0) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }
        if (jTabbedPane1.getSelectedIndex() == jTabbedPane1.getComponentCount() - 1) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged
    
    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
// TODO add your handling code here:
        if (jTabbedPane1.getSelectedIndex() > 0) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
        }
        while (!jTabbedPane1.isEnabledAt(jTabbedPane1.getSelectedIndex())) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
        }
        if (jTabbedPane1.getSelectedIndex() == 0) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }
        if (jTabbedPane1.getSelectedIndex() == jTabbedPane1.getComponentCount() - 1) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
        }
    }//GEN-LAST:event_previousButtonActionPerformed
    
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
// TODO add your handling code here:
        if (jTabbedPane1.getSelectedIndex() < jTabbedPane1.getComponentCount() - 1) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
        }
        while (!jTabbedPane1.isEnabledAt(jTabbedPane1.getSelectedIndex())) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
        }
        if (jTabbedPane1.getSelectedIndex() == 0) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }
        if (jTabbedPane1.getSelectedIndex() == jTabbedPane1.getComponentCount() - 1) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
        }
    }//GEN-LAST:event_nextButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modrilla().setVisible(true);
            }
        });
    }
    
    
    public static double [] xyMOD(double xDXFa1, double yDXFa1, double xMODa1, double yMODa1, double xMODa2, double yMODa2, double xDXF, double yDXF) {
        double fuzz=1.0;
        if(yDXF==yDXFa1) { yDXF=yDXF+fuzz; }
        if(xDXF==xDXFa1) { xDXF=xDXF+fuzz; }
        double theta=Math.atan( (yMODa2-yMODa1) / (xMODa2-xMODa1) );
        double phi=Math.atan( (yDXF-yDXFa1) / (xDXF-xDXFa1) );
        double r=(xDXF-xDXFa1)/Math.cos(phi);
        double xMOD=(r*Math.cos(theta+phi))+xMODa1;
        double yMOD=(r*Math.sin(theta+phi))+yMODa1;
        double [] xyMOD={xMOD,yMOD};
        return xyMOD;
    }
    
    File infile=null;
    
    double [] xDXFholes = new double [100];
    double [] yDXFholes = new double [100];
    double [] xMODholes = new double [100];
    double [] yMODholes = new double [100];
    private double xDXFmax=0.0;
    private double xDXFmin=0.0;
    private double yDXFmax=0.0;
    private double yDXFmin=0.0;
    private double xMODmax=0.0;
    private double xMODmin=0.0;
    private double yMODmax=0.0;
    private double yMODmin=0.0;
    private int holes=0;
    private int hole=0;
    
    private int x=0;
    private int y=0;
    
    private int xSign=1;
    private int ySign=1;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DXFmarksPanel;
    private javax.swing.JButton aboutButton;
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JPanel alignToNickPanel;
    private javax.swing.JComboBox alignmentModeCombo;
    private javax.swing.JLabel alignmentModeLabel;
    private javax.swing.JComboBox backSignCombo;
    private javax.swing.JPanel drillNickPanel;
    private javax.swing.JLabel fooLabel;
    private javax.swing.JComboBox frontSignCombo;
    private javax.swing.JTextArea inputFileTextArea;
    private javax.swing.JLabel inputPlot;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JEditorPane jEditorPane10;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JEditorPane jEditorPane3;
    private javax.swing.JEditorPane jEditorPane4;
    private javax.swing.JEditorPane jEditorPane5;
    private javax.swing.JEditorPane jEditorPane6;
    private javax.swing.JEditorPane jEditorPane7;
    private javax.swing.JEditorPane jEditorPane8;
    private javax.swing.JEditorPane jEditorPane9;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JDialog joggerDialog;
    private javax.swing.JComboBox leftSignCombo;
    private javax.swing.JPanel millMarksPanel;
    private javax.swing.JPanel millSetupPanel;
    private javax.swing.JComboBox millUnitsCombo;
    private javax.swing.JLabel millUnitsLabel;
    private javax.swing.JButton minusXButton;
    private javax.swing.JButton minusYButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JComboBox outputCombo;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextField overdrillField;
    private javax.swing.JTextField peckDistanceField;
    private javax.swing.JButton plusXButton;
    private javax.swing.JButton plusYButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JTextField repeatsField;
    private javax.swing.JComboBox rightSignCombo;
    private javax.swing.JButton selectInputFileButton;
    private javax.swing.JTextField serialDeviceField;
    private javax.swing.JLabel serialDeviceLabel;
    private javax.swing.JPanel setupPanel;
    private javax.swing.JComboBox speedCombo;
    private javax.swing.JComboBox unitsCombo;
    private javax.swing.JLabel unitsLabel;
    private javax.swing.JTextField waferThicknessField;
    private javax.swing.JTextField xDXFa1Field;
    private javax.swing.JLabel xDXFa1UnitsLabel;
    private javax.swing.JLabel xLabel;
    private javax.swing.JTextField xMODa1Field;
    private javax.swing.JLabel xMODa1Label;
    private javax.swing.JLabel xMODa1UnitsLabel;
    private javax.swing.JTextField xMODa2Field;
    private javax.swing.JLabel xMODa2Label;
    private javax.swing.JLabel xMODa2UnitsLabel;
    private javax.swing.JTextField xNickInCrosshairField;
    private javax.swing.JLabel xNickInCrosshairUnitsLabel;
    private javax.swing.JTextField xNickWhenDrilledField;
    private javax.swing.JLabel xNickWhenDrilledUnitsLabel;
    private javax.swing.JTextField yDXFa1Field;
    private javax.swing.JLabel yDXFa1UnitsLabel;
    private javax.swing.JLabel yLabel;
    private javax.swing.JTextField yMODa1Field;
    private javax.swing.JLabel yMODa1Label;
    private javax.swing.JLabel yMODa1UnitsLabel;
    private javax.swing.JTextField yMODa2Field;
    private javax.swing.JLabel yMODa2Label;
    private javax.swing.JLabel yMODa2UnitsLabel;
    private javax.swing.JTextField yNickInCrosshairField;
    private javax.swing.JLabel yNickInCrosshairUnitsLabel;
    private javax.swing.JTextField yNickWhenDrilledField;
    private javax.swing.JLabel yNickWhenDrilledUnitsLabel;
    private javax.swing.JTextField zDrillSpeedField;
    private javax.swing.JComboBox zDrillSpeedUnitsCombo;
    private javax.swing.JLabel zDrillSpeedUnitsLabel;
    private javax.swing.JTextField zNickWhenDrilledField;
    private javax.swing.JLabel zNickWhenDrilledUnitsLabel;
    private javax.swing.JTextField zSpeedField;
    private javax.swing.JLabel zSpeedUnitsLabel;
    private javax.swing.JTextField zSurfaceField;
    private javax.swing.JLabel zSurfaceLabel;
    private javax.swing.JLabel zSurfaceUnitsLabel;
    // End of variables declaration//GEN-END:variables
    
}
